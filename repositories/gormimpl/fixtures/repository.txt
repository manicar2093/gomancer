// Code generated by gomancer
package posttest

import (
	uuid "github.com/google/uuid"
	goption "github.com/manicar2093/goption"
	gormpager "github.com/manicar2093/gormpager"
	connections "github.com/manicar2093/winter/connections"
	udecimal "github.com/quagmt/udecimal"
	models "github.com/user/project_name/internal/domain/models"
	clause "gorm.io/gorm/clause"
	"time"
)

type PostTestRepository struct {
	db *connections.ConnWrapper
}

func NewPostTestRepository(db *connections.ConnWrapper) *PostTestRepository {
	return &PostTestRepository{db: db}
}

// Save can Create and Update an entity. You can use this for http PATH method. Check https://gorm.io/docs/update.html#Save-All-Fields for more info
func (c *PostTestRepository) Save(input *models.PostTest) error {
	if res := c.db.Save(input); res.Error != nil {
		return res.Error
	}
	return nil
}

func (c *PostTestRepository) GetById(id uuid.UUID) (*models.PostTest, error) {
	var found models.PostTest
	if res := c.db.First(&found, id); res.Error != nil {
		return nil, res.Error
	}
	return &found, nil
}

func (c *PostTestRepository) GetAllPaginated(pageNumber, pageSize int) (*gormpager.Page[models.PostTest], error) {
	pager := gormpager.Page[models.PostTest]{PageSize: int64(pageSize), CurrentPage: int64(pageNumber)}
	if err := pager.SelectPages(c.db.GormPager, c.db.DB); err != nil {
		return nil, err
	}
	return &pager, nil
}

type PartialUpdateByIdInput struct {
	Id         uuid.UUID                          `json:"id" param:"id" validate:"required_uuid"`
	Name       goption.Optional[string]           `json:"name"`
	TotalPrice goption.Optional[udecimal.Decimal] `json:"total_price"`
	Price      goption.Optional[udecimal.Decimal] `json:"price"`
	Age        goption.Optional[int]              `json:"age"`
	CaseOfUse  goption.Optional[int32]            `json:"case_of_use"`
	CreatedAt  goption.Optional[time.Time]        `json:"created_at"`
}

// PartialUpdateById can select which field has to be updated from given input
func (c *PostTestRepository) PartialUpdateById(changes PartialUpdateByIdInput) (*models.PostTest, error) {
	var (
		result  = models.PostTest{}
		updates = map[string]any{}
	)

	if changes.Name.IsPresent() {
		updates["name"] = changes.Name.MustGet()
	}
	if changes.TotalPrice.IsPresent() {
		updates["total_price"] = changes.TotalPrice.MustGet()
	}
	if changes.Price.IsPresent() {
		updates["price"] = changes.Price.MustGet()
	}
	if changes.Age.IsPresent() {
		updates["age"] = changes.Age.MustGet()
	}
	if changes.CaseOfUse.IsPresent() {
		updates["case_of_use"] = changes.CaseOfUse.MustGet()
	}
	if changes.CreatedAt.IsPresent() {
		updates["created_at"] = changes.CreatedAt.MustGet()
	}

	if res := c.db.Model(&result).Clauses(clause.Returning{}).Where("id = ?", changes.Id).Updates(updates); res.Error != nil {
		return nil, res.Error
	}

	return &result, nil
}

func (c *PostTestRepository) DeleteById(id uuid.UUID) error {
	if res := c.db.Delete(&models.PostTest{}, "id = ?", id); res.Error != nil {
		return res.Error
	}
	return nil
}
