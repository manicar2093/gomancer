{{define "web_controller_tmpl"}}// Code generated by gomancer
package controllers
{{$pagesPackage := print .LowerNoSpaceCase "pages"}}
import (
	{{.GoDeps.GookitValidate.GenerateImportString}}
	{{.GoDeps.I18n.GenerateImportString}}
	{{.GoDeps.Std.Net.Http.GenerateImportString}}
	{{.GoDeps.Project.Cmd.Controllers.ModelPages.GenerateImportString}}
	{{.GoDeps.Project.Core.CoreTpls.Toast.GenerateImportString}}
	{{.GoDeps.Project.Core.Validator.GenerateImportString}}

	{{.GoDeps.Project.Core.GenerateImportString}}
	{{.GoDeps.Project.Core.CommonReq.GenerateImportString}}
	{{.GoDeps.Project.Internal.Domain.Models.GenerateImportString}}
	{{.InCreation.GenerateImportString}}

	{{.GoDeps.Echo.GenerateImportString}}
)

const (
	Show{{.PascalCase}}RouteName = "show{{.PascalCase}}"
)

type {{.PascalCase}}WebController struct {
	{{.CamelCase}}Repository *{{.InCreation.Alias}}.{{.PascalCase}}Repository
}

func New{{.PascalCase}}WebController({{.CamelCase}}Repository *{{.InCreation.Alias}}.{{.PascalCase}}Repository) *{{.PascalCase}}WebController {
	return &{{.PascalCase}}WebController{
		{{.CamelCase}}Repository: {{.CamelCase}}Repository,
	}
}

func (c *{{.PascalCase}}WebController) SetUpRoutes(group *echo.Group) {
	{{.CamelCase}}Group := group.Group("/{{ Pluralize .SnakeCase}}")

	// Show all postTest
	{{.CamelCase}}Group.GET("", c.GetAllPaginatedHandler)
	// Send page to edit a user
	{{.CamelCase}}Group.GET("/:id/edit", c.GetEditionHandler)
	// Sends page to registry a user
	{{.CamelCase}}Group.GET("/new", c.GetRegistrationPageHandler)
	// Send page to show a user
	{{.CamelCase}}Group.GET("/:id", c.GetShowPostTestPageHandler).Name = Show{{.PascalCase}}RouteName
	// Creates a user
	{{.CamelCase}}Group.POST("", c.SaveHandler)
	// Patch user
	{{.CamelCase}}Group.PATCH("/:id", c.SaveHandler)
	// Updates all user
	{{.CamelCase}}Group.PUT("/:id", c.PartialUpdateByIdHandler)
	// Deletes a user
	{{.CamelCase}}Group.DELETE("/:id", c.DeleteByIdHandler)
}

func (c *{{.PascalCase}}WebController) SaveHandler(ctx echo.Context) error {
	var req = models.{{.PascalCase}}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		if errorsMap, isValidationErr := validator.IsValidationError(err); isValidationErr {
			core.SetFlash(ctx, core.FlashMessage{
				Variant: toast.VariantError,
				Message: i18n.T(ctx.Request().Context(), "validation_error"),
			})
			return core.Render(ctx, http.StatusBadRequest, {{$pagesPackage}}.Register{{.PascalCase}}Page(&req, errorsMap))
		}
		return err
	}

	if err := c.{{.CamelCase}}Repository.Save(&req); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_registry"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(Show{{.PascalCase}}RouteName, req.Id))
}

func (c *{{.PascalCase}}WebController) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.{{.CamelCase}}Repository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, {{$pagesPackage}}.{{.PascalCase}}Index(res))
}

func (c *{{.PascalCase}}WebController) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := {{.InCreation.Alias}}.PartialUpdateByIdInput{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.{{.CamelCase}}Repository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_update"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(Show{{.PascalCase}}RouteName, res.Id))
}

func (c *{{.PascalCase}}WebController) DeleteByIdHandler(ctx echo.Context) error {
	req := struct {
		commonreq.{{GetByType}}
		commonreq.PageData
	}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.{{.CamelCase}}Repository.DeleteById(req.Id); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_deletion"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, "/app/{{ Pluralize .SnakeCase}}?page_number=1")
}

func (c *{{.PascalCase}}WebController) GetRegistrationPageHandler(ctx echo.Context) error {
	return core.Render(ctx, http.StatusOK, {{$pagesPackage}}.Register{{.PascalCase}}Page(&models.{{.PascalCase}}{}, nil))
}

func (c *{{.PascalCase}}WebController) GetShowPostTestPageHandler(ctx echo.Context) error {
	req := commonreq.{{GetByType}}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.{{.CamelCase}}Repository.GetById(req.Id)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, {{$pagesPackage}}.Show{{.PascalCase}}(res))
}

func (c *{{.PascalCase}}WebController) GetEditionHandler(ctx echo.Context) error {
	req := commonreq.{{GetByType}}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.{{.CamelCase}}Repository.GetById(req.Id)
	if err != nil {
		return err
	}
	return core.Render(ctx, http.StatusOK, {{$pagesPackage}}.Edit{{.PascalCase}}Page(res, validate.Errors{}))
}
{{end}}