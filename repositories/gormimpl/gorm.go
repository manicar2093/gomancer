package gormimpl

import (
	"fmt"
	"github.com/charmbracelet/log"
	. "github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"
	"github.com/manicar2093/gomancer/domain"
	"github.com/rjNemo/underscore"
	"os"
	"path"
)

type (
	generatorData struct {
		repositoryStructName string
		db                   string
		receiverStatement    Code
		receiverVar          string
		modelQualifier       Code
	}
	generatorType func(domain.GenerateModelInput, generatorData) Code
)

func GenerateRepository(input domain.GenerateModelInput) error {
	log.Info("Generating gorm repository...")
	repositoryStructName := fmt.Sprintf("%sRepository", input.PascalCase)
	receiverVar := "c"
	data := generatorData{
		repositoryStructName: repositoryStructName,
		db:                   "db",
		receiverStatement:    Id(receiverVar).Op("*").Add(Id(repositoryStructName)),
		receiverVar:          receiverVar,
		modelQualifier: domain.GetPackageQualifier(
			input.ModuleInfo.Name,
			domain.InternalDomainModelsPackagePath,
			input.PascalCase,
		),
	}
	f := NewFile(input.LowerNoSpaceCase)
	f.PackageComment("// Code generated by gomancer")

	generators := []generatorType{
		generateRepoStruct,
		generateRepoConstructor,
		generateSaveMethod,
		generateGetByIdMethod,
		generatedGetAllPaginatedMethod,
		generatePartialUpdateFunction,
		generateDeleteByIdFunction,
	}

	underscore.Each(generators, func(generator generatorType) {
		f.Add(generator(input, data))
	})

	modelPackagePath := path.Join(
		string(domain.InternalPackagePath),
		pluralize.NewClient().Plural(input.LowerNoSpaceCase),
	)
	if err := os.MkdirAll(modelPackagePath, os.ModePerm); err != nil {
		return err
	}

	return f.Save(
		path.Join(
			modelPackagePath,
			"repository_gomancer.go",
		),
	)
}

func generateRepoStruct(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Type().Id(generatorData.repositoryStructName).Struct(
		Id(generatorData.db).Op("*").Qual(domain.GetCorePackage(input.ModuleInfo, domain.CoreConnectionsPkg), "ConnWrapper"),
	).Line().Line()
}

func generateRepoConstructor(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Func().Id(fmt.Sprintf("New%sRepository", input.PascalCase)).Params(
		Id(generatorData.db).Op("*").Qual(domain.GetCorePackage(input.ModuleInfo, domain.CoreConnectionsPkg), "ConnWrapper"),
	).Op("*").Id(generatorData.repositoryStructName).Block(
		Return(
			Op("&").Id(generatorData.repositoryStructName).Values(
				Dict{
					Id(generatorData.db): Id(generatorData.db),
				},
			),
		),
	).Line().Line()
}

func generateSaveMethod(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Comment("// Save can Create and Update an entity. You can use this for http PATH method. Check https://gorm.io/docs/update.html#Save-All-Fields for more info").
		Line().
		Func().Params(generatorData.receiverStatement).Id("Save").Params(
		Id("input").Op("*").Add(
			generatorData.modelQualifier),
	).Error().Block(
		If(
			Id("res").Op(":=").Id(generatorData.receiverVar).Dot(generatorData.db).Dot("Save").Call(
				Id("input"),
			),
			Id("res").Dot("Error").Op("!=").Nil(),
		).Block(
			Return(Id("res").Dot("Error")),
		),
		Return(Nil()),
	).Line().Line()
}

func generateGetByIdMethod(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Func().Params(generatorData.receiverStatement).Id("GetById").Params(
		Id("id").Add(domain.QualifiersByType(input.IdAttribute.Type)),
	).Params(
		Op("*").Add(generatorData.modelQualifier),
		Error(),
	).Block(
		Var().Id("found").Add(generatorData.modelQualifier),
		If(
			Id("res").Op(":=").Id(generatorData.receiverVar).Dot(generatorData.db).Dot("First").Call(
				Op("&").Id("found"),
				Id("id"),
			),
			Id("res").Dot("Error").Op("!=").Nil(),
		).Block(
			Return(Nil(), Id("res").Dot("Error")),
		),
		Return(Op("&").Id("found"), Nil()),
	).Line().Line()
}

func generatedGetAllPaginatedMethod(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Func().Params(generatorData.receiverStatement).Id("GetAllPaginated").Params(
		Id("pageNumber").Op(",").Id("pageSize").Int(),
	).Params(
		Op("*").Qual(domain.GormPagerPkgPath, "Page").Index(generatorData.modelQualifier),
		Error(),
	).Block(
		Id("pager").Op(":=").Qual(domain.GormPagerPkgPath, "Page").Index(generatorData.modelQualifier).Values(
			Id("PageSize").Op(":").Int64().Call(Id("pageSize")),
			Id("CurrentPage").Op(":").Int64().Call(Id("pageNumber")),
		),
		If(
			Id("err").Op(":=").Id("pager").Dot("SelectPages").Call(
				Id(generatorData.receiverVar).Dot(generatorData.db).Dot("GormPager"),
				Id(generatorData.receiverVar).Dot(generatorData.db).Dot("DB"),
			),
			Id("err").Op("!=").Nil(),
		).Block(
			Return(Nil(), Err()),
		),
		Return(Op("&").Id("pager"), Nil()),
	).Line().Line()
}

func generatePartialUpdateFunction(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Type().
		Id("PartialUpdateByIdInput").
		StructFunc(func(g *Group) {
			g.
				Id(input.IdAttribute.PascalCase).
				Add(domain.QualifiersByType(input.IdAttribute.Type)).
				Tag(
					domain.Tags(
						input.IdAttribute,
						domain.Validations{Required: true},
						domain.JsonTag, domain.ParamTag,
					),
				)
			underscore.Map(input.Attributes, func(item domain.Attribute) Code {
				return g.Id(item.PascalCase).Qual(domain.GoptionPkgPath, "Optional").Index(
					domain.QualifiersByType(item.Type),
				).Tag(domain.Tags(item, domain.Validations{}, domain.JsonTag))
			})
		}).
		Line().
		Line().
		Comment("PartialUpdateById can select which field has to be updated from given input").
		Line().
		Func().
		Params(generatorData.receiverStatement).
		Id("PartialUpdateById").
		Params(
			Id("changes").Id("PartialUpdateByIdInput"),
		).
		Params(
			Op("*").Add(generatorData.modelQualifier),
			Error(),
		).BlockFunc(
		func(g *Group) {
			g.Var().
				Defs(
					Id("result").
						Op("=").
						Add(
							generatorData.modelQualifier,
						).
						Values(),
					Id("updates").
						Op("=").
						Map(String()).
						Any().
						Values(),
				).
				Line()

			underscore.Each(input.Attributes, func(attribute domain.Attribute) {
				g.If(
					Id("changes").
						Dot(attribute.PascalCase).
						Dot("IsPresent").
						Call(),
				).Block(
					Id("updates").
						Index(Lit(attribute.SnakeCase)).
						Op("=").
						Id("changes").
						Dot(attribute.PascalCase).
						Dot("MustGet").
						Call(),
				)
			})

			g.
				Line().
				If(
					Id("len").
						Call(
							Qual("slices", "Collect").
								Call(
									Qual("maps", "Keys").
										Call(
											Id("updates"),
										),
								),
						).
						Op("==").
						Lit(0),
				).Block(
				If(
					Id("res").
						Op(":=").
						Id(generatorData.receiverVar).
						Dot(generatorData.db).
						Dot("First").
						Call(
							Op("&").Id("result"),
							Id("changes").Dot("Id"),
						),
					Id("res").
						Dot("Error").
						Op("!=").
						Nil(),
				).Block(
					Return(Nil(), Id("res").Dot("Error")),
				),

				Return(Id("&result"), Nil()),
			)

			g.
				Line().
				Line().
				If(
					Id("res").
						Op(":=").
						Id(generatorData.receiverVar).
						Dot(generatorData.db).
						Dot("Model").
						Call(Op("&").Id("result")).
						Dot("Clauses").
						Call(domain.GetPackageQualifier(domain.GormPkgPath, "clause", "Returning").Values()).
						Dot("Where").
						Call(Lit("id = ?"), Id("changes").Dot("Id")).
						Dot("Updates").
						Call(Id("updates")),
					Id("res").Dot("Error").Op("!=").Nil(),
				).
				Block(
					Return(Nil(), Id("res").Dot("Error")),
				).
				Line().
				Line().
				Return(
					Op("&").Id("result"),
					Nil(),
				)
		},
	).
		Line().
		Line()

}

func generateDeleteByIdFunction(input domain.GenerateModelInput, generatorData generatorData) Code {
	return Func().
		Params(generatorData.receiverStatement).
		Id("DeleteById").
		Params(
			Id("id").
				Add(domain.QualifiersByType(input.IdAttribute.Type)),
		).
		Error().
		Block(
			If(
				Id("res").
					Op(":=").
					Id(generatorData.receiverVar).
					Dot(generatorData.db).
					Dot("Delete").
					Call(
						Op("&").
							Add(generatorData.modelQualifier).
							Values(),
						Lit("id = ?"),
						Id("id"),
					),
				Id("res").
					Dot("Error").
					Op("!=").
					Nil(),
			).Block(
				Return(
					Id("res").Dot("Error"),
				),
			),
			Return(Nil()),
		)
}
