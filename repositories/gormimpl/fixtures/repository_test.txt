// Code generated by gomancer
package posttests_test

import (
	"time"
	"github.com/user/project_name/internal/domain/models"
	"github.com/user/project_name/internal/posttests"
	"github.com/user/project_name/pkg/generators"
	"github.com/user/project_name/pkg/testfunc"

	"github.com/brianvoe/gofakeit/v7"
	"github.com/manicar2093/goption"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/gstruct"
	"github.com/quagmt/udecimal"
)

var _ = Describe("RepositoryGomancer", func() {

	var (
		T    = GinkgoT()
		repo *posttests.PostTestRepository
	)

	BeforeEach(func() {
		repo = posttests.NewPostTestRepository(dbConn)
	})

	Describe("Save", func() {
		It("should save", func() {
			item := generators.GeneratePostTest(T, map[string]any{})

			Expect(repo.Save(&item)).To(Succeed())
			generators.FirstOrFail[models.PostTest](T, dbConn, "id = ?", item.Id)
		})
	})

	Describe("GetById", func() {
		It("should get by id", func() {
			item := generators.GeneratePostTest(T, map[string]any{})
			generators.CreateOrFail(T, dbConn, &item)

			found, err := repo.GetById(item.Id)

			Expect(err).ToNot(HaveOccurred())
			Expect(*found).To(gstruct.MatchFields(gstruct.IgnoreExtras, gstruct.Fields{
				"Id": Equal(item.Id),
                "AnOptionalInt": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt.GetValue())),
                "AnInt": Equal(item.AnInt),
                "AnOptionalInt8": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt8.GetValue())),
                "AnInt8": Equal(item.AnInt8),
                "AnOptionalInt16": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt16.GetValue())),
                "AnInt16": Equal(item.AnInt16),
                "AnOptionalInt32": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt32.GetValue())),
                "AnInt32": Equal(item.AnInt32),
                "AnOptionalInt64": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt64.GetValue())),
                "AnInt64": Equal(item.AnInt64),
                "AnOptionalFloat32": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalFloat32.GetValue())),
                "AnFloat32": Equal(item.AnFloat32),
                "AnOptionalFloat64": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalFloat64.GetValue())),
                "AnFloat64": Equal(item.AnFloat64),
                "OptionalString": HaveField(testfunc.GetValueMethod, Equal(item.OptionalString.GetValue())),
                "String": Equal(item.String),
                "OptionalBool": HaveField(testfunc.GetValueMethod, Equal(item.OptionalBool.GetValue())),
                "Bool": Equal(item.Bool),
                "OptionalTime": HaveField(testfunc.GetValueMethod, BeTemporally("~", item.OptionalTime.GetValue())),
                "Time": BeTemporally("~", item.Time),
                "OptionalDecimal": HaveField(testfunc.GetValueMethod, Equal(item.Decimal.GetValue().RoundBank(2))),
                "Decimal": Equal(item.Decimal.RoundBank(2)),
                "OptionalUuid": HaveField(testfunc.GetValueMethod, Equal(item.OptionalUuid.GetValue())),
                "Uuid": Equal(item.Uuid),
                "OptionalEnum": HaveField(testfunc.GetValueMethod, Equal(item.OptionalEnum.GetValue())),
                "Enum": Equal(item.Enum),
			}))
		})
	})

	Describe("GetAllPaginated", func() {
		It("should get all paginated", func() {
			var (
				expectedPage = 1
				expectedSize = 10
				items        = generators.Slice(func() models.PostTest {
					return generators.GeneratePostTest(T, map[string]any{})
				}, expectedSize)
			)
			generators.CreateOrFail(T, dbConn, items)

			found, err := repo.GetAllPaginated(expectedPage, expectedSize)

			Expect(err).ToNot(HaveOccurred())
			Expect(int(found.CurrentPage)).To(Equal(expectedPage))
			Expect(int(found.PageSize)).To(Equal(expectedSize))
			Expect(found.Items).To(HaveLen(expectedSize))
		})
	})

    Describe("PartialUpdateById", func() {
		It("should partial update by id", func() {
			item := generators.GeneratePostTest(T, map[string]any{})
			generators.CreateOrFail(T, dbConn, &item)

			updated, err := repo.PartialUpdateById(
				generators.GeneratePostTestPartialUpdateByIdInput(T, item.Id, map[string]any{}),
			)

			Expect(err).ToNot(HaveOccurred())
			Expect(*updated).To(gstruct.MatchFields(gstruct.IgnoreExtras, gstruct.Fields{
                "Id": Equal(item.Id),
                "AnOptionalInt": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt.GetValue()))),
                "AnInt": Not(Equal(item.AnInt)),
                "AnOptionalInt8": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt8.GetValue()))),
                "AnInt8": Not(Equal(item.AnInt8)),
                "AnOptionalInt16": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt16.GetValue()))),
                "AnInt16": Not(Equal(item.AnInt16)),
                "AnOptionalInt32": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt32.GetValue()))),
                "AnInt32": Not(Equal(item.AnInt32)),
                "AnOptionalInt64": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt64.GetValue()))),
                "AnInt64": Not(Equal(item.AnInt64)),
                "AnOptionalFloat32": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalFloat32.GetValue()))),
                "AnFloat32": Not(Equal(item.AnFloat32)),
                "AnOptionalFloat64": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalFloat64.GetValue()))),
                "AnFloat64": Not(Equal(item.AnFloat64)),
                "OptionalString": HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalString.GetValue()))),
                "String": Not(Equal(item.String)),
                "OptionalBool": HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalBool.GetValue()))),
                "Bool": Not(Equal(item.Bool)),
                "OptionalTime": HaveField(testfunc.GetValueMethod, Not(BeTemporally("~", item.OptionalTime.GetValue()))),
                "Time": BeTemporally("~", item.Time),
                "OptionalDecimal": HaveField(testfunc.GetValueMethod, Not(Equal(item.Decimal.GetValue().RoundBank(2)))),
                "Decimal": Not(Equal(item.Decimal.)RoundBank(2)),
                "OptionalUuid": HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalUuid.GetValue()))),
                "Uuid": Not(Equal(item.Uuid)),
                "OptionalEnum": HaveField(testfunc.GetValueMethod, Equal(item.OptionalEnum.GetValue())),
                "Enum": Equal(item.Enum),
			}))
		})
	})

	Describe("DeleteById", func() {
		It("should delete by id", func() {
			item := generators.GeneratePostTest(T, map[string]any{})
			generators.CreateOrFail(T, dbConn, &item)

			err := repo.DeleteById(item.Id)

			Expect(err).ToNot(HaveOccurred())
			generators.NotFoundOrFail[models.PostTest](T, dbConn, "id = ?", item.Id)
		})
	})
})
