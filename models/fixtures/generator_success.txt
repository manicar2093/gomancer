package generators

import (
	gofakeit "github.com/brianvoe/gofakeit/v7"
	uuid "github.com/google/uuid"
	goption "github.com/manicar2093/goption"
	udecimal "github.com/quagmt/udecimal"
	models "github.com/user/project_name/internal/domain/models"
)

func GeneratePostTest(t testingI, args map[string]any) models.PostTest {
	fak := models.PostTest{
		AnFloat32:         gofakeit.Float32(),
		AnFloat64:         gofakeit.Float64(),
		AnInt:             gofakeit.Int(),
		AnInt16:           gofakeit.Int16(),
		AnInt32:           gofakeit.Int32(),
		AnInt64:           gofakeit.Int64(),
		AnInt8:            gofakeit.Int8(),
		AnOptionalFloat32: goption.Of(gofakeit.Float32()),
		AnOptionalFloat64: goption.Of(gofakeit.Float64()),
		AnOptionalInt:     goption.Of(gofakeit.Int()),
		AnOptionalInt16:   goption.Of(gofakeit.Int16()),
		AnOptionalInt32:   goption.Of(gofakeit.Int32()),
		AnOptionalInt64:   goption.Of(gofakeit.Int64()),
		AnOptionalInt8:    goption.Of(gofakeit.Int8()),
		Bool:              gofakeit.Bool(),
		Decimal:           udecimal.MustFromFloat64(gofakeit.Float64()),
		Enum:              models.Enum1,
		Id:                uuid.New(),
		OptionalBool:      goption.Of(gofakeit.Bool()),
		OptionalDecimal:   goption.Of(udecimal.MustFromFloat64(gofakeit.Float64())),
		OptionalEnum:      goption.Of(models.OptionalEnum1),
		OptionalString:    goption.Of(gofakeit.Word()),
		OptionalTime:      goption.Of(gofakeit.Date()),
		OptionalUuid:      goption.Of(uuid.New()),
		String:            gofakeit.Word(),
		Time:              gofakeit.Date(),
		Uuid:              uuid.New(),
	}

	decode(t, args, &fak)

	return fak
}

func GeneratePostTestPartialUpdateById(t testingI, id uuid.UUID, args map[string]any) models.PostTestPartialUpdateByIdInput {
	fak := models.PostTest{
		AnFloat32:         goption.Of(gofakeit.Float32()),
		AnFloat64:         goption.Of(gofakeit.Float64()),
		AnInt:             goption.Of(gofakeit.Int()),
		AnInt16:           goption.Of(gofakeit.Int16()),
		AnInt32:           goption.Of(gofakeit.Int32()),
		AnInt64:           goption.Of(gofakeit.Int64()),
		AnInt8:            goption.Of(gofakeit.Int8()),
		AnOptionalFloat32: goption.Of(gofakeit.Float32()),
		AnOptionalFloat64: goption.Of(gofakeit.Float64()),
		AnOptionalInt:     goption.Of(gofakeit.Int()),
		AnOptionalInt16:   goption.Of(gofakeit.Int16()),
		AnOptionalInt32:   goption.Of(gofakeit.Int32()),
		AnOptionalInt64:   goption.Of(gofakeit.Int64()),
		AnOptionalInt8:    goption.Of(gofakeit.Int8()),
		Bool:              goption.Of(gofakeit.Bool()),
		Decimal:           goption.Of(udecimal.MustFromFloat64(gofakeit.Float64())),
		Enum:              goption.Of(models.Enum1),
		Id:                id,
		OptionalBool:      goption.Of(gofakeit.Bool()),
		OptionalDecimal:   goption.Of(udecimal.MustFromFloat64(gofakeit.Float64())),
		OptionalEnum:      goption.Of(models.OptionalEnum1),
		OptionalString:    goption.Of(gofakeit.Word()),
		OptionalTime:      goption.Of(gofakeit.Date()),
		OptionalUuid:      goption.Of(uuid.New()),
		String:            goption.Of(gofakeit.Word()),
		Time:              goption.Of(gofakeit.Date()),
		Uuid:              goption.Of(uuid.New()),
	}

	decode(t, args, &fak)

	return fak
}
