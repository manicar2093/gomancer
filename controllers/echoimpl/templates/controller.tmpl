{{define "controller_tmpl"}}// Code generated by gomancer
package controllers

import (
	"net/http"

	echo "{{.EchoDependency}}"
	winter "{{.WinterDependency}}"
	commonreq "{{.WinterCommonReqDependency}}"
	models "{{.ModuleInfo.Name}}/{{.InternalDomainModelsPath}}"
	{{.SnakeCase}} "{{.ModuleInfo.Name}}/{{.InternalPackagePath}}/{{.SnakeCase}}"
)

type {{.PascalCase}}Controller struct {
	{{.PascalCase}}Repository *{{.SnakeCase}}.{{.PascalCase}}Repository
}

func New{{.PascalCase}}Controller({{.CamelCase}}Repository *{{.SnakeCase}}.{{.PascalCase}}Repository) *{{.PascalCase}}Controller {
	return &{{.PascalCase}}Controller{postTestRepository: postTestRepository}
}

func (c *{{.PascalCase}}Controller) SetUpRoutes(group *echo.Group) {
	{{.CamelCase}}Group := group.Group("/{{.SnakeCase}}")

	{{.CamelCase}}Group.GET("", c.GetAllPaginatedHandler)
	{{.CamelCase}}Group.POST("", c.SaveHandler)
	{{.CamelCase}}Group.GET("/:id", c.GetByIdHandler)
	{{.CamelCase}}Group.PATCH("/:id", c.SaveHandler)
	{{.CamelCase}}Group.PUT("/:id", c.PartialUpdateByIdHandler)
	{{.CamelCase}}Group.DELETE("/:id", c.DeleteByIdHandler)
}

func (c *{{.PascalCase}}Controller) SaveHandler(ctx echo.Context) error {
	var req = models.{{.PascalCase}}{}
	if err := winter.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	if err := c.{{.CamelCase}}Repository.Save(&req); err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, &req)
}

func (c *{{.PascalCase}}Controller) GetByIdHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := winter.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.{{.CamelCase}}Repository.GetById(req.Id)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *{{.PascalCase}}Controller) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := winter.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.{{.CamelCase}}Repository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *{{.PascalCase}}Controller) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := {{.SnakeCase}}.PartialUpdateByIdInput{}
	if err := winter.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.{{.CamelCase}}Repository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, &res)
}

func (c *{{.PascalCase}}Controller) DeleteByIdHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := winter.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.{{.CamelCase}}Repository.DeleteById(req.Id); err != nil {
		return err
	}

	return ctx.NoContent(http.StatusOK)
}
{{end}}