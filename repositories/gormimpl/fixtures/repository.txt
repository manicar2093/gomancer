// Code generated by gomancer
package posttests

import (
	uuid "github.com/google/uuid"
	goption "github.com/manicar2093/goption"
	gormpager "github.com/manicar2093/gormpager"
	udecimal "github.com/quagmt/udecimal"
	connections "github.com/user/project_name/core/connections"
	models "github.com/user/project_name/internal/domain/models"
	clause "gorm.io/gorm/clause"
	"maps"
	"slices"
	"time"
)

type PostTestRepository struct {
	db *connections.ConnWrapper
}

func NewPostTestRepository(db *connections.ConnWrapper) *PostTestRepository {
	return &PostTestRepository{db: db}
}

// Save can Create and Update an entity. You can use this for http PATH method. Check https://gorm.io/docs/update.html#Save-All-Fields for more info
func (c *PostTestRepository) Save(input *models.PostTest) error {
	if res := c.db.Save(input); res.Error != nil {
		return res.Error
	}
	return nil
}

func (c *PostTestRepository) GetById(id uuid.UUID) (*models.PostTest, error) {
	var found models.PostTest
	if res := c.db.First(&found, id); res.Error != nil {
		return nil, res.Error
	}
	return &found, nil
}

func (c *PostTestRepository) GetAllPaginated(pageNumber, pageSize int) (*gormpager.Page[models.PostTest], error) {
	pager := gormpager.Page[models.PostTest]{PageSize: int64(pageSize), CurrentPage: int64(pageNumber)}
	if err := pager.SelectPages(c.db.GormPager, c.db.DB); err != nil {
		return nil, err
	}
	return &pager, nil
}

type PartialUpdateByIdInput struct {
	Id                uuid.UUID                             `form:"id" json:"id" param:"id" query:"id" validate:"required_uuid"`
	AnOptionalInt     goption.Optional[int]                 `form:"an_optional_int" json:"an_optional_int" param:"an_optional_int" query:"an_optional_int"`
	AnInt             goption.Optional[int]                 `form:"an_int" json:"an_int" param:"an_int" query:"an_int"`
	AnOptionalInt8    goption.Optional[int8]                `form:"an_optional_int8" json:"an_optional_int8" param:"an_optional_int8" query:"an_optional_int8"`
	AnInt8            goption.Optional[int8]                `form:"an_int8" json:"an_int8" param:"an_int8" query:"an_int8"`
	AnOptionalInt16   goption.Optional[int16]               `form:"an_optional_int16" json:"an_optional_int16" param:"an_optional_int16" query:"an_optional_int16"`
	AnInt16           goption.Optional[int16]               `form:"an_int16" json:"an_int16" param:"an_int16" query:"an_int16"`
	AnOptionalInt32   goption.Optional[int32]               `form:"an_optional_int32" json:"an_optional_int32" param:"an_optional_int32" query:"an_optional_int32"`
	AnInt32           goption.Optional[int32]               `form:"an_int32" json:"an_int32" param:"an_int32" query:"an_int32"`
	AnOptionalInt64   goption.Optional[int64]               `form:"an_optional_int64" json:"an_optional_int64" param:"an_optional_int64" query:"an_optional_int64"`
	AnInt64           goption.Optional[int64]               `form:"an_int64" json:"an_int64" param:"an_int64" query:"an_int64"`
	AnOptionalFloat32 goption.Optional[float32]             `form:"an_optional_float_32" json:"an_optional_float_32" param:"an_optional_float_32" query:"an_optional_float_32"`
	AnFloat32         goption.Optional[float32]             `form:"an_float_32" json:"an_float_32" param:"an_float_32" query:"an_float_32"`
	AnOptionalFloat64 goption.Optional[float64]             `form:"an_optional_float_64" json:"an_optional_float_64" param:"an_optional_float_64" query:"an_optional_float_64"`
	AnFloat64         goption.Optional[float64]             `form:"an_float_64" json:"an_float_64" param:"an_float_64" query:"an_float_64"`
	OptionalString    goption.Optional[string]              `form:"optional_string" json:"optional_string" param:"optional_string" query:"optional_string"`
	String            goption.Optional[string]              `form:"string" json:"string" param:"string" query:"string"`
	OptionalBool      goption.Optional[bool]                `form:"optional_bool" json:"optional_bool" param:"optional_bool" query:"optional_bool"`
	Bool              goption.Optional[bool]                `form:"bool" json:"bool" param:"bool" query:"bool"`
	OptionalTime      goption.Optional[time.Time]           `form:"optional_time" json:"optional_time" param:"optional_time" query:"optional_time"`
	Time              goption.Optional[time.Time]           `form:"time" json:"time" param:"time" query:"time"`
	OptionalDecimal   goption.Optional[udecimal.Decimal]    `form:"optional_decimal" json:"optional_decimal" param:"optional_decimal" query:"optional_decimal"`
	Decimal           goption.Optional[udecimal.Decimal]    `form:"decimal" json:"decimal" param:"decimal" query:"decimal"`
	OptionalUuid      goption.Optional[uuid.UUID]           `form:"optional_uuid" json:"optional_uuid" param:"optional_uuid" query:"optional_uuid"`
	Uuid              goption.Optional[uuid.UUID]           `form:"uuid" json:"uuid" param:"uuid" query:"uuid"`
	OptionalEnum      goption.Optional[models.OptionalEnum] `form:"optional_enum" json:"optional_enum" param:"optional_enum" query:"optional_enum"`
	Enum              goption.Optional[models.Enum]         `form:"enum" json:"enum" param:"enum" query:"enum"`
}

// PartialUpdateById can select which field has to be updated from given input
func (c *PostTestRepository) PartialUpdateById(changes PartialUpdateByIdInput) (*models.PostTest, error) {
	var (
		result  = models.PostTest{}
		updates = map[string]any{}
	)

	if changes.AnOptionalInt.IsPresent() {
		updates["an_optional_int"] = changes.AnOptionalInt.MustGet()
	}
	if changes.AnInt.IsPresent() {
		updates["an_int"] = changes.AnInt.MustGet()
	}
	if changes.AnOptionalInt8.IsPresent() {
		updates["an_optional_int8"] = changes.AnOptionalInt8.MustGet()
	}
	if changes.AnInt8.IsPresent() {
		updates["an_int8"] = changes.AnInt8.MustGet()
	}
	if changes.AnOptionalInt16.IsPresent() {
		updates["an_optional_int16"] = changes.AnOptionalInt16.MustGet()
	}
	if changes.AnInt16.IsPresent() {
		updates["an_int16"] = changes.AnInt16.MustGet()
	}
	if changes.AnOptionalInt32.IsPresent() {
		updates["an_optional_int32"] = changes.AnOptionalInt32.MustGet()
	}
	if changes.AnInt32.IsPresent() {
		updates["an_int32"] = changes.AnInt32.MustGet()
	}
	if changes.AnOptionalInt64.IsPresent() {
		updates["an_optional_int64"] = changes.AnOptionalInt64.MustGet()
	}
	if changes.AnInt64.IsPresent() {
		updates["an_int64"] = changes.AnInt64.MustGet()
	}
	if changes.AnOptionalFloat32.IsPresent() {
		updates["an_optional_float_32"] = changes.AnOptionalFloat32.MustGet()
	}
	if changes.AnFloat32.IsPresent() {
		updates["an_float_32"] = changes.AnFloat32.MustGet()
	}
	if changes.AnOptionalFloat64.IsPresent() {
		updates["an_optional_float_64"] = changes.AnOptionalFloat64.MustGet()
	}
	if changes.AnFloat64.IsPresent() {
		updates["an_float_64"] = changes.AnFloat64.MustGet()
	}
	if changes.OptionalString.IsPresent() {
		updates["optional_string"] = changes.OptionalString.MustGet()
	}
	if changes.String.IsPresent() {
		updates["string"] = changes.String.MustGet()
	}
	if changes.OptionalBool.IsPresent() {
		updates["optional_bool"] = changes.OptionalBool.MustGet()
	}
	if changes.Bool.IsPresent() {
		updates["bool"] = changes.Bool.MustGet()
	}
	if changes.OptionalTime.IsPresent() {
		updates["optional_time"] = changes.OptionalTime.MustGet()
	}
	if changes.Time.IsPresent() {
		updates["time"] = changes.Time.MustGet()
	}
	if changes.OptionalDecimal.IsPresent() {
		updates["optional_decimal"] = changes.OptionalDecimal.MustGet()
	}
	if changes.Decimal.IsPresent() {
		updates["decimal"] = changes.Decimal.MustGet()
	}
	if changes.OptionalUuid.IsPresent() {
		updates["optional_uuid"] = changes.OptionalUuid.MustGet()
	}
	if changes.Uuid.IsPresent() {
		updates["uuid"] = changes.Uuid.MustGet()
	}
	if changes.OptionalEnum.IsPresent() {
		updates["optional_enum"] = changes.OptionalEnum.MustGet()
	}
	if changes.Enum.IsPresent() {
		updates["enum"] = changes.Enum.MustGet()
	}

	if len(slices.Collect(maps.Keys(updates))) == 0 {
		if res := c.db.First(&result, changes.Id); res.Error != nil {
			return nil, res.Error
		}
		return &result, nil
	}

	if res := c.db.Model(&result).Clauses(clause.Returning{}).Where("id = ?", changes.Id).Updates(updates); res.Error != nil {
		return nil, res.Error
	}

	return &result, nil
}

func (c *PostTestRepository) DeleteById(id uuid.UUID) error {
	if res := c.db.Delete(&models.PostTest{}, "id = ?", id); res.Error != nil {
		return res.Error
	}
	return nil
}
