// Code generated by gomancer
package controllers

import (
	validate	"github.com/gookit/validate"
	i18n	"github.com/invopop/ctxi18n/i18n"
	http	"net/http"
	posttestpages	"github.com/user/project_name/cmd/service/controllers/posttestpages"
	toast	"github.com/user/project_name/core/coretpls/toast"
	validator	"github.com/user/project_name/core/validator"

	core	"github.com/user/project_name/core"
	commonreq	"github.com/user/project_name/core/commonreq"
	models	"github.com/user/project_name/internal/domain/models"
	posttests	"github.com/user/project_name/internal/posttests"

	echo	"github.com/labstack/echo/v4"
)

const (
	ShowPostTestRouteName = "showPostTest"
)

type PostTestWebController struct {
	postTestRepository *posttests.PostTestRepository
}

func NewPostTestWebController(postTestRepository *posttests.PostTestRepository) *PostTestWebController {
	return &PostTestWebController{
		postTestRepository: postTestRepository,
	}
}

func (c *PostTestWebController) SetUpRoutes(group *echo.Group) {
	postTestGroup := group.Group("/post_tests")

	// Show all postTest
	postTestGroup.GET("", c.GetAllPaginatedHandler)
	// Send page to edit a user
	postTestGroup.GET("/:id/edit", c.GetEditionHandler)
	// Sends page to registry a user
	postTestGroup.GET("/new", c.GetRegistrationPageHandler)
	// Send page to show a user
	postTestGroup.GET("/:id", c.GetShowPostTestPageHandler).Name = ShowPostTestRouteName
	// Creates a user
	postTestGroup.POST("", c.SaveHandler)
	// Patch user
	postTestGroup.PATCH("/:id", c.SaveHandler)
	// Updates all user
	postTestGroup.PUT("/:id", c.PartialUpdateByIdHandler)
	// Deletes a user
	postTestGroup.DELETE("/:id", c.DeleteByIdHandler)
}

func (c *PostTestWebController) SaveHandler(ctx echo.Context) error {
	var req = models.PostTest{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		if errorsMap, isValidationErr := validator.IsValidationError(err); isValidationErr {
			core.SetFlash(ctx, core.FlashMessage{
				Variant: toast.VariantError,
				Message: i18n.T(ctx.Request().Context(), "validation_error"),
			})
			return core.Render(ctx, http.StatusBadRequest, posttestpages.RegisterPostTestPage(&req, errorsMap))
		}
		return err
	}

	if err := c.postTestRepository.Save(&req); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_registry"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(ShowPostTestRouteName, req.Id))
}

func (c *PostTestWebController) GetAllPaginatedHandler(ctx echo.Context) error {
	req := commonreq.PageData{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.postTestRepository.GetAllPaginated(req.PageNumber, req.PageSize)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, posttestpages.PostTestIndex(res))
}

func (c *PostTestWebController) PartialUpdateByIdHandler(ctx echo.Context) error {
	req := posttests.PartialUpdateByIdInput{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.postTestRepository.PartialUpdateById(req)
	if err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_update"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, ctx.Echo().Reverse(ShowPostTestRouteName, res.Id))
}

func (c *PostTestWebController) DeleteByIdHandler(ctx echo.Context) error {
	req := struct {
		commonreq.GetByIdUUID
		commonreq.PageData
	}{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	if err := c.postTestRepository.DeleteById(req.Id); err != nil {
		return err
	}

	core.SetFlash(ctx, core.FlashMessage{
		Variant: toast.VariantSuccess,
		Message: i18n.T(ctx.Request().Context(), "correct_deletion"),
		Title:   i18n.T(ctx.Request().Context(), "success"),
	})

	return ctx.Redirect(http.StatusSeeOther, "/app/post_tests?page_number=1")
}

func (c *PostTestWebController) GetRegistrationPageHandler(ctx echo.Context) error {
	return core.Render(ctx, http.StatusOK, posttestpages.RegisterPostTestPage(&models.PostTest{}, nil))
}

func (c *PostTestWebController) GetShowPostTestPageHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}

	res, err := c.postTestRepository.GetById(req.Id)
	if err != nil {
		return err
	}

	return core.Render(ctx, http.StatusOK, posttestpages.ShowPostTest(res))
}

func (c *PostTestWebController) GetEditionHandler(ctx echo.Context) error {
	req := commonreq.GetByIdUUID{}
	if err := core.BindAndValidate(ctx, &req); err != nil {
		return err
	}
	res, err := c.postTestRepository.GetById(req.Id)
	if err != nil {
		return err
	}
	return core.Render(ctx, http.StatusOK, posttestpages.EditPostTestPage(res, validate.Errors{}))
}
