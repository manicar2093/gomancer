// Code generated by gomancer
package posttests_test

import (
	gofakeit "github.com/brianvoe/gofakeit/v7"
	goption "github.com/manicar2093/goption"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	gstruct "github.com/onsi/gomega/gstruct"
	udecimal "github.com/quagmt/udecimal"
	models "github.com/user/project_name/internal/domain/models"
	posttests "github.com/user/project_name/internal/posttests"
	generators "github.com/user/project_name/pkg/generators"
	testfunc "github.com/user/project_name/pkg/testfunc"
	time "time"
)

var _ = Describe("RepositoryGomancer", func() {
	var (
		T    = GinkgoT()
		repo *posttests.PostTestRepository
	)

	BeforeEach(func() {
		repo = posttests.NewPostTestRepository(dbConn)
	})

	Describe("Save", func() {
		It("should save", func() {
			item := generators.GeneratePostTest(T, map[string]any{})

			Expect(repo.Save(&item)).To(Success())
			generators.FirstOrFail[models.PostTest](T, dbConn, "id = ?", item.Id)
		})
	})

	Describe("GetById", func() {
		It("should get by id", func() {
			item := generators.GeneratePostTest(T, map[string]any{})
			generators.CreateOrFail(T, dbConn, &item)

			found, err := repo.GetById(item.Id)

			Expect(err).ToNot(HaveOccurred())
			Expect(*found).To(gstruct.MatchFields(gstruct.IgnoreExtras, gstruct.Fields{
				"AnFloat32":         Equal(item.AnFloat32),
				"AnFloat64":         Equal(item.AnFloat64),
				"AnInt":             Equal(item.AnInt),
				"AnInt16":           Equal(item.AnInt16),
				"AnInt32":           Equal(item.AnInt32),
				"AnInt64":           Equal(item.AnInt64),
				"AnInt8":            Equal(item.AnInt8),
				"AnOptionalFloat32": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalFloat32.GetValue())),
				"AnOptionalFloat64": HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalFloat64.GetValue())),
				"AnOptionalInt":     HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt.GetValue())),
				"AnOptionalInt16":   HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt16.GetValue())),
				"AnOptionalInt32":   HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt32.GetValue())),
				"AnOptionalInt64":   HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt64.GetValue())),
				"AnOptionalInt8":    HaveField(testfunc.GetValueMethod, Equal(item.AnOptionalInt8.GetValue())),
				"Bool":              Equal(item.Bool),
				"Decimal":           Equal(item.Decimal.RoundBank(2)),
				"Enum":              Equal(item.Enum),
				"Id":                Equal(item.Id),
				"OptionalBool":      HaveField(testfunc.GetValueMethod, Equal(item.OptionalBool.GetValue())),
				"OptionalDecimal":   HaveField(testfunc.GetValueMethod, Equal(item.OptionalDecimal.GetValue().RoundBank(2))),
				"OptionalEnum":      HaveField(testfunc.GetValueMethod, Equal(item.OptionalEnum.GetValue())),
				"OptionalString":    HaveField(testfunc.GetValueMethod, Equal(item.OptionalString.GetValue())),
				"OptionalTime":      HaveField(testfunc.GetValueMethod, BeTemporally("~", item.OptionalTime.GetValue())),
				"OptionalUuid":      HaveField(testfunc.GetValueMethod, Equal(item.OptionalUuid.GetValue())),
				"String":            Equal(item.String),
				"Time":              BeTemporally("~", item.Time),
				"Uuid":              Equal(item.Uuid),
			}))
		})
	})

	Describe("GetAllPaginated", func() {
		It("should get all paginated", func() {
			var (
				expectedPage = 1
				expectedSize = 10
				items        = generators.Slice(func() models.PostTest {
					return generators.GeneratePostTest(T, map[string]any{})
				}, expectedSize)
			)
			generators.CreateOrFail(T, dbConn, items)

			found, err := repo.GetAllPaginated(expectedPage, expectedSize)

			Expect(err).ToNot(HaveOccurred())
			Expect(int(found.CurrentPage)).To(Equal(expectedPage))
			Expect(int(found.PageSize)).To(Equal(expectedSize))
			Expect(found.Items).To(HaveLen(expectedSize))
		})
	})

	Describe("PartialUpdateById", func() {
		It("should partial update by id", func() {
			item := generators.GeneratePostTest(T, map[string]any{})
			generators.CreateOrFail(T, dbConn, &item)

			updated, err := repo.PartialUpdateById(generators.GeneratePostTestPartialUpdateById(T, item.Id, map[string]any{}))

			Expect(err).ToNot(HaveOccurred())
			Expect(*updated).To(gstruct.MatchFields(gstruct.IgnoreExtras, gstruct.Fields{
				"AnFloat32":         Not(Equal(item.AnFloat32)),
				"AnFloat64":         Not(Equal(item.AnFloat64)),
				"AnInt":             Not(Equal(item.AnInt)),
				"AnInt16":           Not(Equal(item.AnInt16)),
				"AnInt32":           Not(Equal(item.AnInt32)),
				"AnInt64":           Not(Equal(item.AnInt64)),
				"AnInt8":            Not(Equal(item.AnInt8)),
				"AnOptionalFloat32": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalFloat32.GetValue()))),
				"AnOptionalFloat64": HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalFloat64.GetValue()))),
				"AnOptionalInt":     HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt.GetValue()))),
				"AnOptionalInt16":   HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt16.GetValue()))),
				"AnOptionalInt32":   HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt32.GetValue()))),
				"AnOptionalInt64":   HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt64.GetValue()))),
				"AnOptionalInt8":    HaveField(testfunc.GetValueMethod, Not(Equal(item.AnOptionalInt8.GetValue()))),
				"Bool":              Not(Equal(item.Bool)),
				"Decimal":           Not(Equal(item.Decimal.RoundBank(2))),
				"Enum":              Not(Equal(item.Enum)),
				"Id":                Equal(item.Id),
				"OptionalBool":      HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalBool.GetValue()))),
				"OptionalDecimal":   HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalDecimal.GetValue().RoundBank(2)))),
				"OptionalEnum":      HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalEnum.GetValue()))),
				"OptionalString":    HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalString.GetValue()))),
				"OptionalTime":      HaveField(testfunc.GetValueMethod, Not(BeTemporally("~", item.OptionalTime.GetValue()))),
				"OptionalUuid":      HaveField(testfunc.GetValueMethod, Not(Equal(item.OptionalUuid.GetValue()))),
				"String":            Not(Equal(item.String)),
				"Time":              Not(BeTemporally("~", item.Time)),
				"Uuid":              Not(Equal(item.Uuid)),
			}))
		})
	})

	Describe("DeleteById", func() {
		It("should delete by id", func() {
			item := generators.GeneratePostTest(T, map[string]any)
			generators.CreateOrFail(T, dbConn, &item)

			err := repo.DeleteById(item.Id)

			Expect(err).ToNot(HaveOccurred())
			generators.NotFoundOrFail[models.PostTest](T, dbConn, "id = ?", item.Id)
		})
	})
})
